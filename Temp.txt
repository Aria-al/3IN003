Question 1 : 

a. m(S) = m(S, k) 

b. P(s) = 
"
m(s, i) = 
    - 0 si s = 0
    - min{m(s, i - 1), m(s - tab[i], i) + 1} 
"
P(0) : se montre directement par la relation précédente 
Supposont P(k) vraie pour tout k < s : 
- m(s, i-1) renvoie m(s) en considérant les i-1 premiers bocaux 
- m(s-t[i], i) + 1 retourne m(s-t[i]) + 1 en considérant les i premiers bocaux  
Ces deux choix sont donc équivalents à dire : 
- On ne prend pas le bocal i 
- On prend le bocal i, et retire la capacité du bocal i à s 
Le minimum de ces deux quantités est en fait égal à la décision que l'on à prise, c'est à dire 
si on a pris le bocal où non. Et puisque les P(k) sont vraies, P(s) est vraie.
Conclusion P(s) est vraie pour tout s. 


Question 2 : 

fonction : m (int s, int i) -> int :
    si (s = 0) et (i in {1, ..., k})
        retourne 0 ; 
    si (s >= 1) et (i = 0)
        retourne +infini ; 
    si (s < 0) et (i in {1, ..., k})
        retourne +infini ; 
    return min (m(s, i-1), m(s-V[i], i) + 1) ; 

L'appel initial est m(S, k)


Question 3 : 

à faire dans l'éditeur de texte, l'arbre est dans le dossier

Question 4 : 

m(1, 1) est calculé 3 fois dans l'arbre des appels récursifs. 
En général, si S = 2*k + 1, on appelle m(1, 1) k+1 fois, en effet 
on peut voir que m(S, 2) = k+1 à chaque fois, avec C = [1, k]
et que chaque appel de m(s, 2) effectue un appel de m(1, 1)


Question 5 : 

a. Les cases du tableau peuvent être remplies de haut en bas, gauche à droite : 
la formule requérant les valeurs M[s, i-1] et M[s - V[i], i], en remplissant de cette manière 
on garantit que ces valeurs sont déja calculées 

b. 
fonction : m (int s, int k) -> int :
    M = matrice de dimension s+1 * k+1 d'entiers ; 
    pour chaque i entre 0 et s : 
        M[i, 0] = +infini ; 
    pour chaque j entre 1 et k : 
        M[0, j] = 0 ; 
    pour chaque i entre 1 et s :
        pour chaque j entre 1 et k : 
            M[i, j] = min (M[i, j - 1], M[i - V[j - 1], j]) ; 
    retourne M[s, k] ; 

c. complexité temporelle et spatiale : k*S


Question 6 : 

a. 
M = matrice de dimension s+1 * k+1 => M = matrice de dimension s+1 * k+1 de tableaux ; 
M[i, 0] = +infini => [+infini]

M[0, j] = 0 => [0]

M[i, j] = min (M[i, j - 1], M[i - V[j], j]) =>
minimum = min (M[i, j - 1], M[i - V[j], j]) ; 
si (minimum = M[i, j - 1]) :
    M[i, j] = copie(M[i, j - 1]) ; 
sinon : 
    M[i, j] = copie(M[i - V[j], j]) ; 
    M[i, j][j] = 1 + M[i, j][j] ; 
    M[i, j][0] = 1 + M[i, j][0] ; 

b. 
fonction : aux (int i, int j, Matrice mat, Array tableau) -> Array : 
    si (i <= 0) ou (j <= 1) : 
        res = array de longueur k ; 
        pour i entre 0 et k : 
            res[i] = 0 ; 
        retourne res ; 
    
    si (mat[i, j] == mat[i, j - 1]) : 
        retourne aux (i, j - 1, mat, tableau) ; 

    si (mat[i, j] == mat[i - V[j - 1], j] + 1) : 
        res = aux (i - V[j - 1], j, mat, tab) ; 
        res[j - 1] = res[j - 1] + 1 ; 
        retourne res ; 
On appelle cette fonction avec aux (S, k, M, NULL), avec M la matrice renvoyée par 
l'algorithme de la question 5. 


Question 7 : 

L'algorithme obtenu est de complexité S*k, puisque l'algorithme retour est en S + k


Question 8 : 

fonction : AlgorithmeGlouton (int S, int k) -> int : 
    int i = k - 1 ; 
    int d = S - V[i] ; 
    int q = S ; 
    int res = 0 ; 
    tant que q > 0 : 
        tant que d < 0 et i > 0 : 
            i = i - 1 ; 
            d = S - V[i] ; 
        q = q - V[i] ; 
        d = q - V[i] ; 
        res = res + 1 ; 
    retourne res ; 


Question 9 : 
On peut prendre le système suivant : 
V = [1, 2, 5, 7, 9, 18], et S = 12 
On trouve que Algo1 = 2 et AlgoGlouton = 3
Avec les bocaux choisis suivants : 
    - Algo1_Cap = {7, 5}
    - AlgoGlouton_Cap = {9, 2, 1}
On peut voir que l'algorithme glouton ne renvoie pas la bonne valeur, car en prenant 9, il 
ne voit pas que prendre 7 lui permet de directement prendre 5 après, et à la place doit 
prendre 2, puis 1 


Question 10 : 

Soit V = [1, k], avec k > 1. 
Supposont S un naturel, alors on peut directement dire que 
m(S) = q + r 
Avec :
    q = division euclidienne de S par k 
    r = reste de la division euclidienne de S par k 


Question 11 : 

Supposont que AlgoGlouton(S) se fait en thêta(S). 

Question 6 : 
a) à chaque appel de trouveValeurSuivante :
- copie le tableau des pots utilisés par la case du tableau qu'on a sélectionné dans la fonction dans 
la case présente 
- ajoute 1 au nombre correspondant au nombre de pots utilisé du pot correspondant 


